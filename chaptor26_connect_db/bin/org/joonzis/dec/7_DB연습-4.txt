drop table orders;
drop table book;
drop table customer;

1. 책 정보
bookid		책 아이디 pk
bookname	책 이름
publisher	저자
price		책 가격

create table book (
bookid number not null,
bookname varchar2(50),
publisher varchar2(50),
price number,
constraint book_pk primary key (bookid) );

2. 고객 정보
customerid	고객 아이디
name 		고객 이름
address		주소
phone		전화번호

create table customer (
customerid number not null,
name varchar2(20),
address varchar2(50),
phone varchar2(20),
constraint customer_pk primary key (customerid) );

3. 판매 정보
orderid		판매 아이디
customerid	고객 아이디
bookid		책 아이디
saleprice	판매 가격
orderdate	판매 일자

create table orders (
orderid number not null,
customerid number,
bookid number,
saleprice number,
orderdate date,
constraint orders_pk primary key (orderid),
constraint orders_book_fk foreign key (bookid) references book (bookid),
constraint orders_customer_fk foreign key (customerid) references customer (customerid) );


insert into book values (1, '축구의역사', '굿스포츠', 7000);
insert into book values (2, '축구아는여자', '나무수', 13000);
insert into book values (3, '축구의이해', '대한미디어', 22000);
insert into book values (4, '골프바이블', '대한미디어', 35000);
insert into book values (5, '피겨교본', '굿스포츠', 6000);
insert into book values (6, '역도단계별기술', '굿스포츠', 6000);
insert into book values (7, '야구의추억', '이상미디어', 20000);
insert into book values (8, '야구를부탁해', '이상미디어', 13000);
insert into book values (9, '올림픽이야기', '삼성당', 7500);
insert into book values (10, '올림픽챔피언', '피어슨', 13000);

insert into customer values (1, '박지성', '영국 맨체스터', '010-0000-0000');
insert into customer values (2, '김연아', '대한민국 서울', '010-1111-1111');
insert into customer values (3, '장미란', '대한민국 강원도', '010-2222-2222');
insert into customer values (4, '추신수', '미국 텍사스', '010-4444-4444');
insert into customer values (5, '박세리', '대한민국 대전', '010-5555-5555');

insert into orders values (1, 1, 1, 6000, '2014-07-01');
insert into orders values (2, 1, 3, 21000, '2014-07-03');
insert into orders values (3, 2, 5, 8000, '2014-07-03');
insert into orders values (4, 3, 6, 6000, '2014-07-04');
insert into orders values (5, 4, 7, 20000, '2014-07-07');
insert into orders values (6, 1, 2, 12000, '2014-07-07');
insert into orders values (7, 4, 8, 13000, '2014-07-07');
insert into orders values (8, 3, 10, 12000, '2014-07-08');
insert into orders values (9, 2, 10, 7000, '2014-07-09');
insert into orders values (10, 3, 8, 13000, '2014-07-10');

commit;

-----------------------------------------------------------------

1. bookid가 1인 책의 이름을 출력하시오.
-> select bookname from book where bookid = 1;
-> select book.bookname from book where book.bookid = 1;
-> select b.bookname from book b where b.bookid = 1;
		          (book b = book을 b라고 부르겠다.)	

2. 가격이 20000원 이상인 책의 이름을 모두 출력하시오.
-> select bookname from book where price >= 20000;
-> select book.bookname from book where book.price >= 20000;
-> select b.bookname from book b where b.price >= 20000;

3. 출판사 중복을 제거하여 출력하시오.
-> select distinct publisher from book;
-> select distinct book.publisher from book;
-> select distinct b.publisher from book b;
(필드 앞에 distinct를 붙인다.)

4. 총 판매된 책의 가격을 구하시오.
->  select sum(saleprice) as 총판매액 from orders;

5. 박지성의 총 구매액을 구하시오.
-> select sum(saleprice) from customer, orders where 1 = 1 and customer.customerid = orders.customerid and customer. name = '박지성';
-- select sum(saleprice) as saleprice from (select * from orders)A left join (select * from customer)B on A.customerid=B.customerid where name='박지성'

6. 박지성의 구매한 도서 수를 구하시오.
-> select count(*) as 박지성구매건수 from customer, orders where customer.customerid = orders.customerid and customer.name ='박지성';

7. 2014년 7월 4일부터 7월 7일 사이에 주문 받은(제외한) 주문 정보를 출력하시오.
-> select * from orders where orderdate between '2014-07-04' and '2014-07-07';
-> select * from orders where orderdate not between '2014-07-04' and '2014-07-07'; (제외시)

8. 주문한 적이 없는 고객의 이름을 출력하시오.
->  select name from customer where name not in (select customer.name from customer, orders where customer.customerid = orders.customerid);
					     (구매한 고객)
--select * from (select name, customerid from customer)A left join (select * from orders)B on A.customerid=B.customerid					

9. 박지성이 구매한 도서의 출판사 수(중복없이 검색하세요.)를 출력하세요.
-> select count (distinct publisher) from book, customer, orders where customer.customerid = orders.customerid and book.bookid = orders.bookid and customer.name ='박지성';


10. 고객의 이름과 고객별 총 구매액을 함께 출력하시오.
->  select c.name, sum(o.saleprice) from customer c, orders o where c.customerid = o.customerid group by o.customerid, c.name;