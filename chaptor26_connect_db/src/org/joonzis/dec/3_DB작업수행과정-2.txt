1. Insert, Update, Delete 문은 최종적으로 반영되기 위해 commit; 또는 rollback; 을 사용한다.
	1) commit;	저장
	2) rollback;	최종 commit 으로 되돌아 감	


2. Insert 문

	1) 레코드를 추가할 때 사용
	2) 구문
		insert into 테이블 values (값1, 값2, 값3);
		insert into 테이블 (필드1, 필드2, 필드3) values (값1, 값2, 값3);
	3) 예시
		insert into student (no, name, tel, register) values (student_seq.nextval, 'alice', '010-1111-1111', sysdate);
		insert into student (no, name, register) values (student_seq.nextval, 'babara', sysdate);
		insert into student values (student_seq.nextval, 'chris', '010-2222-2222', to_date(sysdate, 'yyyy-mm-dd'));
		insert into student values (student_seq.nextval, 'devora', '010-3333-3333', to_date('2019/10/28', 'yyyy-mm-dd'));

3. Delete 문

	1) 레코드를 삭제할 때 사용
	2) 구문
		delete from 테이블;
		delete from 테이블 where 조건식;

4. Update 문

	1) 레코드를 수정할 때 사용
	2) 구문
		update 테이블 set 업데이트내용;
		update 테이블 set 업데이트내용 where 조건식;


5. Select 문

	1) 레코드를 검색할 때 사용
	2) 구문
		select * from 테이블; ( * : 모든필드 )
		select 필드1, 필드2 from 테이블;
		select 테이블.필드1, 테이블.필드2 from 테이블;
		select 테이블1.필드1, 테이블1.필드2, 테이블2.필드1 from 테이블1, 테이블2; (실제로는 join 과 함께 사용)
	3) 집계함수
		select sum(필드) from 테이블;
		select avg(필드) from 테이블;
		select max(필드) from 테이블;
		select min(필드) from 테이블;
		select count(필드) from 테이블; (지정한 필드에 입력된 데이터 개수)
		select count(*) from 테이블; (입력된 레코드 개수)
		- 집계함수의 결과는 값이다. (검색된 레코드가 아니라는 의미!)		
		select count(*) from student_results where score >= 80; (score 80 이상)
		select count(*) from student_results where score >= (select avg(score) from student_results); (score 평균 이상)
	4) as 절
		select 필드 as 새이름 from 테이블; (필드를 새이름으로 검색)
	5) order by 절
		(1) asc : 오름차순 정렬 (생략 가능) (ascending)
		(2) desc : 내림차순 정렬 (descending)
		(3) 사용방법 예시
			select * from student order by no; (no 의 오름차순 정렬)
			select * from student order by no desc; (no 의 내림차순 정렬)
			select * from student order by name, no desc; (1차기준:name 오름차순, 같은name발생시 2차기준:no 내림차순)
			select * from student where no >= 3 order by name; (order by 는 마지막에 작성)
	6) group by 절
		(1) 그룹화 하는 경우에 사용
		(2) having 절을 함께 사용하면 그룹에 대해 조건의 지정이 가능
		(3) 구문
			group by 그룹필드;
			group by 그룹필드 having 조건식;
		(4) 집계함수와 사용되는 경우가 많다.
			select sum(필드) from 테이블 group by 그룹필드;
		(5) 사용예제
			select sum(point) from buy group by membership; (같은 멤버쉽끼리 point 합계 구하기)
			select sum(point) from buy group by membership having membership='gold'; (gold 멤버쉽의 point 합계 구하기)
	
	7) 테이블 이름 변경
		 select b.* from bbs_t b	: bbs_t 테이블의 이름을 b로 하겠다.
	 	 (select * from bbs_t) a	: bbs_t 테이블의 모든 값을 a로 하겠다.			

6. where 절 (Select, Update, Delete 문에서 공통 사용)

	1) 사용예제
		(1) 동등비교
			select * from student where dept = '경영'; (dept가 경영인 학생 출력)
			select * from student where dept <> '경영'; (dept가 경영이 아닌 학생 출력)
			select * from student where dept != '경영'; (dept가 경영이 아닌 학생 출력)
		(2) 널값비교
			select * from student where home_phone = null; (x불가)
			select * from student where home_phone is null; (home_phone 이 없는 학생 출력)
			select * from student where home_phone is not null; (home_phone 이 있는 학생 출력)
		(3) 만능문자 (%:글자수제한없음, _:한글자)
			select * from student where addr like '서울%'; (addr 이 서울로 시작하는 학생 출력)
			서울시			=> 서울_
			서울특별시		=> 서울___
			=> 서울%
			select * from student where email like '%gmail.com'; (email 이 gmail.com 으로 끝나는 학생 출력)
			select * from student where id like '%a%'; (id 에 a 를 포함한 학생 출력)
			select * from student where no like '__a%'; (no 의 3번째 글자가 a인 학생 출력)
			(* 첫 글자로 만능문자를 사용하면 성능이 떨어지는 것으로 알려져 있다.)
		(4) 크기비교 (>, >=, <, <=, 사이값)
			select * from student where score between 80 and 89; (score 가 80 이상 89 이하)
		(5) and, or
			select * from student where no >= 3 and score >= 90;
			select * from student where addr = '서울' or addr = '인천';
			select * from student where addr in ('서울', '인천');